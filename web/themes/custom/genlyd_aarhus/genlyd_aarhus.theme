<?php
/**
 * @file
 * Contains theme hooks.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess_block().
 */
function genlyd_aarhus_preprocess_block(&$variables) {
  // Expose the block id to be use in suggestions.
  if (isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  }
  // Handle views blocks.
  else if (isset($variables['derivative_plugin_id'])) {
    $variables['content']['#attributes']['block'] = $variables['derivative_plugin_id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function genlyd_aarhus_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Add template suggestion to blocks.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function genlyd_aarhus_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Add template suggestion to forms.
  if (isset($variables['element']['#form_id'])) {
    $hook = str_replace(['form-', '-'], ['', '_'], $variables['element']['#form_id']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function genlyd_aarhus_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add template suggestion to page.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $content_type;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Node Activity preprocess.
 */
function genlyd_aarhus_preprocess_node__activity(&$variables) {
  $node = $variables['node'];

  // Get categories.
  $categories = [];
  foreach ($node->field_categories->referencedEntities() as $category) {
    $categories[] = $category->name->value;
  }

  $currentUser = \Drupal::currentUser();
  $currentPath = \Drupal::service('path.alias_manager')->getAliasByPath(\Drupal::service('path.current')->getPath());

  $signupButton = NULL;
  $externalSignupButton = NULL;

  // Only show register to logged in users.
  if (!$currentUser->isAnonymous()) {
    // Not anonymous user.
    $signedUpUsers = $node->field_signed_up_users->referencedEntities();

    $alreadyAdded = FALSE;

    // Is the user registered to the activity?
    foreach ($signedUpUsers as $user) {
      if ($user->uid->value == $currentUser->id()) {
        $alreadyAdded = TRUE;
        break;
      }
    }

    $signupButton = [
      'href' => \Drupal\Core\Url::fromRoute('itk_activity.action_signup', [
        'nid' => $node->id(),
        'destination' => $currentPath,
      ], ['absolute' => TRUE])->toString()
    ];

    if ($alreadyAdded) {
      $signupButton['title'] = \Drupal::translation()->translate('Unregister');
    }
    else {
      $signupButton['title'] = \Drupal::translation()->translate('Register');
    }

    $externalSignupButton = [
      'href' => '/activity/' . $node->id() . '/external_signup',
      'title' => \Drupal::translation()->translate('Register other user'),
    ];
  } else {
    $signupButton = [
      'href' => '/user',
      'title' => \Drupal::translation()->translate('Login to register'),
    ];
  }

  // Attach facebook share button js and drupalSettings.
  $variables['#attached']['library'][] = 'itk_activity/fb_share';
  $variables['#attached']['drupalSettings']['itk_activity'] = [
    'fbShare' => [
      'appId' => \Drupal::config('simple_fb_connect.settings')->get('app_id'),
      'apiVersion' => \Drupal::config('simple_fb_connect.settings')->get('api_version'),
      'url' => \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])->toString(),
    ],
  ];

  // Urlencoded newlines.
  $newlines = rawurlencode("\n\n");

  // Setup mailto link.
  $mailtoParts = [
    "mailto:?subject=",
    rawurlencode(\Drupal::translation()->translate('Here is a suggestion for an activity in a community in Aarhus')),
    "&body=",
    rawurlencode(\Drupal::translation()->translate('Try to have a look at this activity in Aarhus.')),
    $newlines,
    rawurlencode($node->title->value),
    $newlines,
    rawurlencode(\Drupal::translation()->translate('Open this link to see the activity')),
    ": ",
    \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])->toString(),
  ];
  $mailto = implode("", $mailtoParts);

  // Set data for template.
  $variables['activity'] = [
    'activityHero' => [
      'title' => $node->title->value,
      'image' => _genlyd_aarhus_get_image_url($node, 'activity'),
    ],
    'activityOverview' => [
      'headingWithIconDescription' => [
        'title' => \Drupal::translation()->translate('Description'),
      ],
      'headingWithIconDetails' => [
        'title' => \Drupal::translation()->translate('Details')
      ],
      'categories' => $categories,
      'info' => [
        'title' => \Drupal::translation()->translate('Important information:'),
        'signup_required' => $node->field_signup_required->value ?
          \Drupal::translation()->translate('Signup required') : NULL,
        'entry_requirements' => $node->field_entry_requirements->entity->name->value,
        'physical_requirements' => $node->field_physical_requirements->entity->name->value,
        'help_needed' => $node->field_help_needed->entity->name->value,
      ],
      'body' => check_markup($node->body->value, 'filtered_html'),
      'meta' => [
        'date' => \Drupal::service('date.formatter')->format((new DateTime($node->field_date->value))->getTimestamp(), 'date_long'),
        'date_label' => $node->field_date->getFieldDefinition()->getLabel(),
        'price' => _genlyd_aarhus_get_price_text($node->field_price->value),
        'price_label' => $node->field_price->getFieldDefinition()->getLabel(),
        'start_time' => $node->field_time_start->value,
        'start_time_label' => $node->field_time_start->getFieldDefinition()->getLabel(),
        'end_time' => $node->field_time_end->value,
        'end_time_label' => $node->field_time_end->getFieldDefinition()->getLabel(),
        'address' => $node->field_address->value,
        'address_label' => $node->field_address->getFieldDefinition()->getLabel(),
        'owner' =>  $node->uid->entity->name->value,
        'owner_label' => \Drupal::translation()->translate('Owner'),
        'number_of_participants' => $node->field_signed_up_users->count() + $node->field_external_signed_up_users->count(),
        'number_of_participants_label' => \Drupal::translation()
          ->translate('Signed up users'),
        'signupButton' => $signupButton,
        'signupExternalButton' => $externalSignupButton,
        'socialShare' => [
          'buttons' => [
            [
              'title' => \Drupal::translation()->translate('Share on facebook'),
              'jsClass' => 'js-facebook-share-button',
            ],
          ],
          'links' => [
            [
              'title' => \Drupal::translation()->translate('Share by mail'),
              'href' => $mailto,
            ]
          ],
        ],
      ]
    ]
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Node Activity Teaser preprocess.
 */
function genlyd_aarhus_preprocess_node__activity__teaser(&$variables) {
  $node = $variables['node'];

  $imageUrl = _genlyd_aarhus_get_image_url($node, 'activity_teaser');

  $variables['cardActivity'] = [
    'link' => $node->toUrl()->toString(),
    'cardHeader' => [
      'title' => $node->title->value,
      'image' => [
        'src' => $imageUrl,
      ],
    ],
    'cardInfo' => [
      'activityMetas' => [
        [
          'label' => \Drupal::translation()->translate('Date'),
          'text' => \Drupal::service('date.formatter')->format((new DateTime($node->field_date->value))->getTimestamp(), 'date_medium'),
        ],
        [
          'label' => \Drupal::translation()->translate('Price'),
          'text' => _genlyd_aarhus_get_price_text($node->field_price->value),
        ],
        [
          'label' => \Drupal::translation()->translate('Area'),
          'text' => $node->field_area->value,
        ],
        [
          'label' => \Drupal::translation()->translate('Participants'),
          'text' => $node->field_signed_up_users->count(),
        ],
      ]
    ]
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Node Activity Teaser Edit preprocess.
 *
 * Extends genlyd_aarhus_preprocess_node__activity__teaser() with
 *   two action buttons.
 */
function genlyd_aarhus_preprocess_node__activity__teaser_edit(&$variables) {
  // Extend teaser hook.
  genlyd_aarhus_preprocess_node__activity__teaser($variables);

  $node = $variables['node'];

  $variables['cardActivity']['cardActions'] = [
    'deleteButton' => [
      'title' => \Drupal::translation()->translate('Delete'),
      'href' => \Drupal\Core\Url::fromRoute('entity.node.delete_form', ['node' => $node->id()], ['absolute' => TRUE])->toString(),
    ],
    'editButton' => [
      'title' => \Drupal::translation()->translate('Edit'),
      'href' => \Drupal\Core\Url::fromRoute('entity.node.edit_form', ['node' => $node->id()], ['absolute' => TRUE])->toString(),
    ],
    'cloneButton' => [
      'title' => \Drupal::translation()->translate('Clone'),
      'href' => \Drupal\Core\Url::fromRoute('itk_activity.action_clone', ['nid' => $node->id()], ['absolute' => TRUE])->toString(),
    ]
  ];
}

/**
 * Implements hook_views_pre_render().
 *
 * Sets the variable
 * Depends on the area_text_custom_X being set for header and footer.
 * Order:
 *   Header:
 *     - area_text_custom = Title
 *     - area_text_custom_1 = Subtitle
 *   Footer:
 *     - area_text_custom = Text
 *     - area_text_custom_1 = Button text
 *     - area_text_custom_2 = Button link
 *
 * @param ViewExecutable $view
 *   The view to add data to.
 */
function genlyd_aarhus_views_pre_render(ViewExecutable &$view) {
  $id = $view->id();

  // Attach header and footer data to activity views.
  if ($id == 'activity_popular' || $id == 'activity_recent' || $id == 'activity_user' || $id == 'activity_user_registered' || $id == 'activity') {
    $view->data = (object) [];

    $header = $view->header;

    if (isset($header) && count($header) > 0) {
      $view->data->header = (object) [];

      if (isset($header['area_text_custom'])) {
        $view->data->header->title = \Drupal::translation()->translate('' . $header['area_text_custom']->options['content']);
      }
      if (isset($header['area_text_custom_1'])) {
        $view->data->header->subtitle = \Drupal::translation()->translate('' . $header['area_text_custom_1']->options['content']);
      }
    }

    $footer = $view->footer;

    if (isset($footer) && count($footer) > 0) {
      $view->data->footer = (object) [];

      if (isset($footer['area_text_custom'])) {
        $view->data->footer->text = \Drupal::translation()->translate('' . $footer['area_text_custom']->options['content']);
      }
      if (isset($footer['area_text_custom_1'])) {
        $view->data->footer->button_text = \Drupal::translation()->translate('' . $footer['area_text_custom_1']->options['content']);
      }
      if (isset($footer['area_text_custom_2'])) {
        $view->data->footer->button_link = \Drupal::translation()->translate('' . $footer['area_text_custom_2']->options['content']);
      }
    }
  }

  // Attach filter js to activity view.
  if ($id == 'activity') {
    // Attach filters js.
    $view->element['#attached']['library'][] = 'itk_activity/filters';
    $view->element['#attached']['drupalSettings']['itk_activity'] = [
      'filterButton' => [
        'textShow' => \Drupal::translation()->translate('Show filters'),
        'textHide' => \Drupal::translation()->translate('Hide filters'),
      ],
    ];
  }
}

/**
 * Get the text for the price.
 *
 * @param $price
 *   The value of the price field.
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   The markup result.
 */
function _genlyd_aarhus_get_price_text($price) {
  // Set price text.
  if (!isset($price) || $price <= 0) {
    return \Drupal::translation()->translate('Free');
  }
  else {
    return \Drupal::translation()->translate(':price kr.', [':price' => $price]);
  }
}

/**
 * Get the image url for the activity.
 *
 * If activity does not have an image, try to get it from the selected
 * categories and finally fallback to a theme provided default image.
 *
 * @param $node
 *   The activity.
 * @param $imageStyle
 *   The image style to apply to the image.
 * @return \Drupal\Core\GeneratedUrl|null|string
 *   The url to the image.
 */
function _genlyd_aarhus_get_image_url($node, $imageStyle) {
  // Get image url.
  $imageUrl = NULL;
  if (isset($node->field_image->entity)) {
    $image = $node->field_image->entity->getFileUri();
    $imageUrl = ImageStyle::load($imageStyle)->buildUrl($image);
  }
  else {
    $referencedCategories = $node->field_categories->referencedEntities();

    // Search for category with default image. Select the first available.
    foreach ($referencedCategories as $category) {
      if (isset($category->field_default_image->entity)) {
        $image = $category->field_default_image->entity->getFileUri();
        $imageUrl = ImageStyle::load($imageStyle)->buildUrl($image);
        break;
      }
    }

    // If no image has been set, select placeholder image.
    if (!isset($imageUrl)) {
      // Load category default image url.
      $imageUrl = "/" . drupal_get_path('theme', 'genlyd_aarhus') . "/source/assets/images/activity/fallback.png";
    }
  }

  return $imageUrl;
}
